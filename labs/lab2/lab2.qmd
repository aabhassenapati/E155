---
title: "Lab 2: Multiplexed 7-Segment Display"
description: "Here I document my work on the lab 2 of MicroPs, where I work with FPGA and seven segment display, and switches"
date: "09/10/25"
categories:
  - labs 
  - FPGA
  - e155
author: Aabhas Senapati
draft: false
---

## Introduction

I this lab I try to design a dual seven segment display displaying inputs by two 4-bit dip switches, and using only one seven-segment decoder, by time-multiplexing the output.

## Design and Testing Methodology
 I designed four modules in Verilog to implement my hardware on the FPGA, where my top module interfaces with the modules that divide the clock signal using a counter, add the two switch inputs using a adder, and also a module that drives the dual seven segment display through time multipleixng. In my clock_divider module, I used a counter to divide my clock signal from 24Mhz to 240 Hz. In the four_bit_adder module, I added the two 4-bit switch inputs to give a 5-bit sum output that is displayed on leds. In the dual_sevenseg module a mux switches the inputs to the decoder for seven segment, based on the divided clock signal, and reset. 
 
 My calculations for resistor values used in the circuit to connect leds, seven-segment, and transistors can be found as below.

![](images/lab2_calculation0.jpg) 

![Fig. 1: Calculations for resistor values](images/lab2_calculation1.jpg)

## Technical Documentation

### Block Diagram

![Fig. 2: Block Diagram for top module "lab2_as"](images/lab2_block_diagram.PNG) 


### Schematic

![Fig. 3: Schematic for Hardware Setup](images/lab2_schematic.jpg)

### HDL Code

<script src="https://gist.github.com/aabhassenapati/8292540d567c86b1a9fa6bcd80691cf6.js"></script>

<script src="https://gist.github.com/aabhassenapati/d514cc5fcf40c792587ba487f43fd8a0.js"></script>

<script src="https://gist.github.com/aabhassenapati/0cc3858ce7655cc5bff423ddea69b84f.js"></script>

<script src="https://gist.github.com/aabhassenapati/d3e50ed0126c695184ec5f469593ded2.js"></script>

## Results and Discussion

![Fig. 4: Hardware Setup working](images/lab2_hardware.png)


![Fig. 5: RTL Synthesis for the top module](images/rtl_lab2.png)

### Testbench Simulation

<script src="https://gist.github.com/aabhassenapati/64006c5b12128208ee966ce214ce5528.js"></script>

<script src="https://gist.github.com/aabhassenapati/c957267a88224dc48163fc1cac914341.js"></script>

<script src="https://gist.github.com/aabhassenapati/6b770a0b25f3c524a86fcd93673206ef.js"></script>

<script src="https://gist.github.com/aabhassenapati/738948fdabd36d9d46bafcc7f725b76d.js"></script>

![Fig. 6: Waveforms for top module lab2_as](images/waveforms_lab2_as.png)

![Fig. 7: Waveforms for module clock_divider](images/waveforms_clockdivider.png)

![Fig. 8: Waveforms for module four_bit_adder](images/waveforms_fourbitadder.png)

![Fig. 9: Waveforms for module drive_dual_sevenseg](images/waveforms_dualsevenseg.png)

![](images/tbout1_lab2_as.png)

![Fig. 10: Testbench Output for module lab2_as](images/tbout2_lab2_as.png)

![Fig. 11: Testbench Output for module clock_divider](images/tbout_clockdivider.png)

![Fig. 12: Testbench Output for module four_bit_adder](images/tbout_fourbitadder.png)

![Fig. 13: Testbench Output for module drive_dual_sevenseg](images/tbout_drivedualsevenseg.png)


## Conclusion
 I was able to succesfully achieve all the goals for this lab to display sum of two switch inputs on leds, and time-multiplexed display of inputs on the dual seven segment. I learnt how to use an FPGA and to time-multiplex outputs and drive multiple hardware periperhals using same internal hardware. I spent like approximately 15 hours on this lab. I also found it helpful to modularize my code to make it easier to have full coverage on modules, and better idiomatic representation of logic.

## AI Prototype 

Upon entering the given prompt the initial AI generated code that syntehsized on first go itself, for both the prompts, this shows the versatality of these tools to not only geenrate fresh code, but also use our code, and adapt its logic to build upon it, which is very helpful in real world project development, where nothing is built from scratch but rather a progressive increment on existing work. It is pretty cool to see how easily can AI accelerate the workflow for hardware development related projects. I am attaching below RTL synthesis for the AI geenrated code.

![](images/ai_rtl1.png)

![Fig. 14: RTL synthesis for AI generated Code](images/ai_rtl2.png)

